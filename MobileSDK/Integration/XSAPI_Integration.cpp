// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#include <pch.h>
#include "XSAPI_Integration.h"

#define RETURN_STRING_FROM_HR(e) case (e): return #e

std::string ConvertHRtoString(HRESULT hr)
{
    switch (hr)
    {
        RETURN_STRING_FROM_HR(S_OK);
        RETURN_STRING_FROM_HR(E_FAIL);
        RETURN_STRING_FROM_HR(E_POINTER);
        RETURN_STRING_FROM_HR(E_INVALIDARG);
        RETURN_STRING_FROM_HR(E_OUTOFMEMORY);
        RETURN_STRING_FROM_HR(E_NOT_SUFFICIENT_BUFFER);
        RETURN_STRING_FROM_HR(E_NOT_SUPPORTED);
        RETURN_STRING_FROM_HR(E_ABORT);
        RETURN_STRING_FROM_HR(E_NOTIMPL);
        RETURN_STRING_FROM_HR(E_ACCESSDENIED);
        RETURN_STRING_FROM_HR(E_PENDING);
        RETURN_STRING_FROM_HR(E_UNEXPECTED);
        RETURN_STRING_FROM_HR(E_TIME_CRITICAL_THREAD);
        RETURN_STRING_FROM_HR(E_NOINTERFACE);
        RETURN_STRING_FROM_HR(E_BOUNDS);

        RETURN_STRING_FROM_HR(HTTP_E_STATUS_AMBIGUOUS);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_BAD_GATEWAY);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_BAD_METHOD);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_BAD_REQUEST);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_CONFLICT);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_DENIED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_EXPECTATION_FAILED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_FORBIDDEN);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_GATEWAY_TIMEOUT);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_GONE);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_LENGTH_REQUIRED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_MOVED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_NONE_ACCEPTABLE);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_NOT_FOUND);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_NOT_MODIFIED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_NOT_SUPPORTED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_PAYMENT_REQ);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_PRECOND_FAILED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_PROXY_AUTH_REQ);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_RANGE_NOT_SATISFIABLE);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_REDIRECT);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_REDIRECT_KEEP_VERB);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_REDIRECT_METHOD);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_REQUEST_TIMEOUT);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_REQUEST_TOO_LARGE);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_SERVER_ERROR);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_SERVICE_UNAVAIL);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_UNEXPECTED);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_UNSUPPORTED_MEDIA);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_URI_TOO_LONG);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_USE_PROXY);
        RETURN_STRING_FROM_HR(HTTP_E_STATUS_VERSION_NOT_SUP);
        RETURN_STRING_FROM_HR(ONL_E_ACTION_REQUIRED);
        RETURN_STRING_FROM_HR(WEB_E_INVALID_JSON_STRING);
        RETURN_STRING_FROM_HR(WEB_E_UNEXPECTED_CONTENT);

        RETURN_STRING_FROM_HR(E_XAL_NOTINITIALIZED);
        RETURN_STRING_FROM_HR(E_XAL_ALREADYINITIALIZED);
        RETURN_STRING_FROM_HR(E_XAL_USERSETNOTEMPTY);
        RETURN_STRING_FROM_HR(E_XAL_USERSETFULL);
        RETURN_STRING_FROM_HR(E_XAL_USERSIGNEDOUT);
        RETURN_STRING_FROM_HR(E_XAL_DUPLICATEDUSER);
        RETURN_STRING_FROM_HR(E_XAL_NETWORK);
        RETURN_STRING_FROM_HR(E_XAL_CLIENTERROR);
        RETURN_STRING_FROM_HR(E_XAL_UIREQUIRED);
        RETURN_STRING_FROM_HR(E_XAL_HANDLERALREADYREGISTERED);
        RETURN_STRING_FROM_HR(E_XAL_UNEXPECTEDUSERSIGNEDIN);
        RETURN_STRING_FROM_HR(E_XAL_NOTATTACHEDTOJVM);
        RETURN_STRING_FROM_HR(E_XAL_DEVICEUSER);
        RETURN_STRING_FROM_HR(E_XAL_DEFERRALNOTAVAILABLE);
        RETURN_STRING_FROM_HR(E_XAL_MISSINGPLATFORMEVENTHANDLER);
        RETURN_STRING_FROM_HR(E_XAL_USERNOTFOUND);

        RETURN_STRING_FROM_HR(E_XBL_RUNTIME_ERROR);
        RETURN_STRING_FROM_HR(E_XBL_RTA_GENERIC_ERROR);
        RETURN_STRING_FROM_HR(E_XBL_RTA_SUBSCRIPTION_LIMIT_REACHED);
        RETURN_STRING_FROM_HR(E_XBL_RTA_ACCESS_DENIED);
        RETURN_STRING_FROM_HR(E_XBL_AUTH_UNKNOWN_ERROR);
        RETURN_STRING_FROM_HR(E_XBL_AUTH_RUNTIME_ERROR);
        RETURN_STRING_FROM_HR(E_XBL_AUTH_NO_TOKEN);
        RETURN_STRING_FROM_HR(E_XBL_ALREADY_INITIALIZED);
    default: return "unknown";
    }
}
#ifdef RETURN_STRING_FROM_HR
#undef RETURN_STRING_FROM_HR
#endif