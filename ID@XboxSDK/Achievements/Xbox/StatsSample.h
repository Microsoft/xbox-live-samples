
//**********************************************************************`
//* This is an include file generated by EtwPlusTool.                  *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#pragma pack(push, 16)

#include "EtwPlus.h"

#if defined(__cplusplus)
extern "C" {
#endif

	// Field Descriptors, used in the ETX_EVENT_DESCRIPTOR array below
	//
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_AchievementUpdate_Fields[5] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_EnemyDefeated_Fields[16] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_GameProgress_Fields[4] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_Float,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_ItemAcquired_Fields[12] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_ItemUsed_Fields[11] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_MediaUsage_Fields[27] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UInt32,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UInt64,0 },{ EtxFieldType_UInt32,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_UInt64,0 },{ EtxFieldType_UInt64,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_UInt32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_MultiplayerRoundEnd_Fields[11] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_MultiplayerRoundStart_Fields[9] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_ObjectiveEnd_Fields[9] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_ObjectiveStart_Fields[8] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PageAction_Fields[9] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PageView_Fields[9] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PlayerDefeated_Fields[15] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PlayerSessionEnd_Fields[7] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PlayerSessionPause_Fields[4] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PlayerSessionResume_Fields[6] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PlayerSessionStart_Fields[6] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PlayerSpawned_Fields[12] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 },{ EtxFieldType_Float,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_PuzzleSolved_Fields[8] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Float,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_SectionEnd_Fields[8] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_SectionStart_Fields[7] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_Int32,0 },{ EtxFieldType_Int32,0 } };
	EXTERN_C __declspec(selectany) ETX_FIELD_DESCRIPTOR XDKS_0280C350_ViewOffer_Fields[5] = { { EtxFieldType_UnicodeString,0 },{ EtxFieldType_UnicodeString,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_GUID,0 },{ EtxFieldType_GUID,0 } };

	// Event name mapping
	//
#define AchievementUpdate_value 1
#define EnemyDefeated_value 2
#define GameProgress_value 3
#define ItemAcquired_value 4
#define ItemUsed_value 5
#define MediaUsage_value 6
#define MultiplayerRoundEnd_value 7
#define MultiplayerRoundStart_value 8
#define ObjectiveEnd_value 9
#define ObjectiveStart_value 10
#define PageAction_value 11
#define PageView_value 12
#define PlayerDefeated_value 13
#define PlayerSessionEnd_value 14
#define PlayerSessionPause_value 15
#define PlayerSessionResume_value 16
#define PlayerSessionStart_value 17
#define PlayerSpawned_value 18
#define PuzzleSolved_value 19
#define SectionEnd_value 20
#define SectionStart_value 21
#define ViewOffer_value 22

	// Event Descriptor array
	//
	EXTERN_C __declspec(selectany) ETX_EVENT_DESCRIPTOR XDKS_0280C350Events[22] = {
		{ { 1, 0, 0, 0, 0, 0, 0x0 }, "AchievementUpdate", "0.7.IGAU-1.0", XDKS_0280C350_AchievementUpdate_Fields, 5, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 2, 0, 0, 0, 0, 0, 0x0 }, "EnemyDefeated", "0.7.IGED-2.0", XDKS_0280C350_EnemyDefeated_Fields, 16, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 3, 0, 0, 0, 0, 0, 0x0 }, "GameProgress", "0.7.IGGP-2.0", XDKS_0280C350_GameProgress_Fields, 4, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 4, 0, 0, 0, 0, 0, 0x0 }, "ItemAcquired", "0.7.IGIA-2.0", XDKS_0280C350_ItemAcquired_Fields, 12, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 5, 0, 0, 0, 0, 0, 0x0 }, "ItemUsed", "0.7.IGIU-2.0", XDKS_0280C350_ItemUsed_Fields, 11, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 6, 0, 0, 0, 0, 0, 0x0 }, "MediaUsage", "0.7.MAUMU-2.0", XDKS_0280C350_MediaUsage_Fields, 27, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 7, 0, 0, 0, 0, 0, 0x0 }, "MultiplayerRoundEnd", "0.7.IGMRE-2.0", XDKS_0280C350_MultiplayerRoundEnd_Fields, 11, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 8, 0, 0, 0, 0, 0, 0x0 }, "MultiplayerRoundStart", "0.7.IGMRS-2.0", XDKS_0280C350_MultiplayerRoundStart_Fields, 9, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 9, 0, 0, 0, 0, 0, 0x0 }, "ObjectiveEnd", "0.7.IGOE-3.0", XDKS_0280C350_ObjectiveEnd_Fields, 9, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 10, 0, 0, 0, 0, 0, 0x0 }, "ObjectiveStart", "0.7.IGOS-2.0", XDKS_0280C350_ObjectiveStart_Fields, 8, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 11, 0, 0, 0, 0, 0, 0x0 }, "PageAction", "0.7.IGPA-1.0", XDKS_0280C350_PageAction_Fields, 9, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 12, 0, 0, 0, 0, 0, 0x0 }, "PageView", "0.7.IGPV-1.0", XDKS_0280C350_PageView_Fields, 9, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 13, 0, 0, 0, 0, 0, 0x0 }, "PlayerDefeated", "0.7.IGPD-2.0", XDKS_0280C350_PlayerDefeated_Fields, 15, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 14, 0, 0, 0, 0, 0, 0x0 }, "PlayerSessionEnd", "0.7.IGPSE-2.0", XDKS_0280C350_PlayerSessionEnd_Fields, 7, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 15, 0, 0, 0, 0, 0, 0x0 }, "PlayerSessionPause", "0.7.IGPSPA-2.0", XDKS_0280C350_PlayerSessionPause_Fields, 4, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 16, 0, 0, 0, 0, 0, 0x0 }, "PlayerSessionResume", "0.7.IGPSR-2.0", XDKS_0280C350_PlayerSessionResume_Fields, 6, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 17, 0, 0, 0, 0, 0, 0x0 }, "PlayerSessionStart", "0.7.IGPSS-2.0", XDKS_0280C350_PlayerSessionStart_Fields, 6, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 18, 0, 0, 0, 0, 0, 0x0 }, "PlayerSpawned", "0.7.IGPSP-2.0", XDKS_0280C350_PlayerSpawned_Fields, 12, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 19, 0, 0, 0, 0, 0, 0x0 }, "PuzzleSolved", "0.7.IGPS-2.0", XDKS_0280C350_PuzzleSolved_Fields, 8, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 20, 0, 0, 0, 0, 0, 0x0 }, "SectionEnd", "0.7.IGSE-2.0", XDKS_0280C350_SectionEnd_Fields, 8, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 21, 0, 0, 0, 0, 0, 0x0 }, "SectionStart", "0.7.IGSS-2.0", XDKS_0280C350_SectionStart_Fields, 7, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault },
		{ { 22, 0, 0, 0, 0, 0, 0x0 }, "ViewOffer", "0.7.IGVO-1.0", XDKS_0280C350_ViewOffer_Fields, 5, 0, EtxEventEnabledState_Undefined, EtxEventEnabledState_ProviderDefault, EtxPopulationSample_Undefined, EtxPopulationSample_UseProviderPopulationSample, EtxEventLatency_Undefined, EtxEventLatency_ProviderDefault, EtxEventPriority_Undefined, EtxEventPriority_ProviderDefault } };

	// Provider Descriptor for XDKS_0280C350
	//
	EXTERN_C __declspec(selectany) ETX_PROVIDER_DESCRIPTOR XDKS_0280C350Provider = { "XDKS_0280C350",{ 0x5e07270a,0xceca,0x41ec,{ 0xb9,0xe6,0xae,0x7c,0xf6,0xb2,0x17,0xaf } }, 22, (ETX_EVENT_DESCRIPTOR*)&XDKS_0280C350Events, 0, EtxProviderEnabledState_Undefined, EtxProviderEnabledState_OnByDefault, 0, 100, EtxProviderLatency_Undefined, EtxProviderLatency_RealTime, EtxProviderPriority_Undefined, EtxProviderPriority_Critical };

	// ETW handle for XDKS_0280C350
	//
	EXTERN_C __declspec(selectany) REGHANDLE XDKS_0280C350Handle = (REGHANDLE)0;

	/*++

	Routine Description:

	Register the provider with ETW+.

	Arguments:

	None

	Remarks:

	ERROR_SUCCESS if success or if the provider was already registered.
	Otherwise, an error code.

	--*/
#define EventRegisterXDKS_0280C350() EtxRegister(&XDKS_0280C350Provider, &XDKS_0280C350Handle)

	/*++

	Routine Description:

	Unregister the provider from ETW+.

	Arguments:
	None
	Remarks:
	ERROR_SUCCESS if success or if the provider was not registered.
	Otherwise, an error code.
	--*/
#define EventUnregisterXDKS_0280C350() EtxUnregister(&XDKS_0280C350Provider, &XDKS_0280C350Handle)

#define EventEnabledAchievementUpdate() (TRUE)

	// Entry point to log the event AchievementUpdate
	//
	__inline
		ULONG
		EventWriteAchievementUpdate(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR AchievementId, __in const signed int PercentComplete)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_AchievementUpdate 5

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_AchievementUpdate];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], (AchievementId != NULL) ? AchievementId : L"", (AchievementId != NULL) ? (ULONG)((wcslen(AchievementId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[4], &PercentComplete, sizeof(PercentComplete));

		return EtxEventWrite(&XDKS_0280C350Events[0], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_AchievementUpdate, EventData);
	}
#define EventEnabledEnemyDefeated() (TRUE)

	// Entry point to log the event EnemyDefeated
	//
	__inline
		ULONG
		EventWriteEnemyDefeated(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in LPCGUID RoundId, __in const signed int PlayerRoleId, __in const signed int PlayerWeaponId, __in const signed int EnemyRoleId, __in const signed int KillTypeId, __in const float LocationX, __in const float LocationY, __in const float LocationZ, __in const signed int EnemyWeaponId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_EnemyDefeated 16

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_EnemyDefeated];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], RoundId, sizeof(GUID));
		EventDataDescCreate(&EventData[8], &PlayerRoleId, sizeof(PlayerRoleId));
		EventDataDescCreate(&EventData[9], &PlayerWeaponId, sizeof(PlayerWeaponId));
		EventDataDescCreate(&EventData[10], &EnemyRoleId, sizeof(EnemyRoleId));
		EventDataDescCreate(&EventData[11], &KillTypeId, sizeof(KillTypeId));
		EventDataDescCreate(&EventData[12], &LocationX, sizeof(LocationX));
		EventDataDescCreate(&EventData[13], &LocationY, sizeof(LocationY));
		EventDataDescCreate(&EventData[14], &LocationZ, sizeof(LocationZ));
		EventDataDescCreate(&EventData[15], &EnemyWeaponId, sizeof(EnemyWeaponId));

		return EtxEventWrite(&XDKS_0280C350Events[1], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_EnemyDefeated, EventData);
	}
#define EventEnabledGameProgress() (TRUE)

	// Entry point to log the event GameProgress
	//
	__inline
		ULONG
		EventWriteGameProgress(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in const float CompletionPercent)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_GameProgress 4

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_GameProgress];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], &CompletionPercent, sizeof(CompletionPercent));

		return EtxEventWrite(&XDKS_0280C350Events[2], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_GameProgress, EventData);
	}
#define EventEnabledItemAcquired() (TRUE)

	// Entry point to log the event ItemAcquired
	//
	__inline
		ULONG
		EventWriteItemAcquired(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in const signed int ItemId, __in const signed int AcquisitionMethodId, __in const float LocationX, __in const float LocationY, __in const float LocationZ)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_ItemAcquired 12

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_ItemAcquired];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], &ItemId, sizeof(ItemId));
		EventDataDescCreate(&EventData[8], &AcquisitionMethodId, sizeof(AcquisitionMethodId));
		EventDataDescCreate(&EventData[9], &LocationX, sizeof(LocationX));
		EventDataDescCreate(&EventData[10], &LocationY, sizeof(LocationY));
		EventDataDescCreate(&EventData[11], &LocationZ, sizeof(LocationZ));

		return EtxEventWrite(&XDKS_0280C350Events[3], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_ItemAcquired, EventData);
	}
#define EventEnabledItemUsed() (TRUE)

	// Entry point to log the event ItemUsed
	//
	__inline
		ULONG
		EventWriteItemUsed(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in const signed int ItemId, __in const float LocationX, __in const float LocationY, __in const float LocationZ)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_ItemUsed 11

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_ItemUsed];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], &ItemId, sizeof(ItemId));
		EventDataDescCreate(&EventData[8], &LocationX, sizeof(LocationX));
		EventDataDescCreate(&EventData[9], &LocationY, sizeof(LocationY));
		EventDataDescCreate(&EventData[10], &LocationZ, sizeof(LocationZ));

		return EtxEventWrite(&XDKS_0280C350Events[4], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_ItemUsed, EventData);
	}
#define EventEnabledMediaUsage() (TRUE)

	// Entry point to log the event MediaUsage
	//
	__inline
		ULONG
		EventWriteMediaUsage(__in_opt PCWSTR AppSessionId, __in_opt PCWSTR AppSessionStartDateTime, __in const unsigned int UserIdType, __in_opt PCWSTR UserId, __in_opt PCWSTR SubscriptionTierType, __in_opt PCWSTR SubscriptionTier, __in_opt PCWSTR MediaType, __in_opt PCWSTR ProviderId, __in_opt PCWSTR ProviderMediaId, __in_opt PCWSTR ProviderMediaInstanceId, __in LPCGUID BingId, __in const unsigned __int64 MediaLengthMs, __in const unsigned int MediaControlAction, __in const float PlaybackSpeed, __in const unsigned __int64 MediaPositionMs, __in const unsigned __int64 PlaybackDurationMs, __in_opt PCWSTR AcquisitionType, __in_opt PCWSTR AcquisitionContext, __in_opt PCWSTR AcquisitionContextType, __in_opt PCWSTR AcquisitionContextId, __in const signed int PlaybackIsStream, __in const signed int PlaybackIsTethered, __in_opt PCWSTR MarketplaceLocation, __in_opt PCWSTR ContentLocale, __in const float TimeZoneOffset, __in const unsigned int ScreenState)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_MediaUsage 27

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_MediaUsage];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (AppSessionId != NULL) ? AppSessionId : L"", (AppSessionId != NULL) ? (ULONG)((wcslen(AppSessionId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], (AppSessionStartDateTime != NULL) ? AppSessionStartDateTime : L"", (AppSessionStartDateTime != NULL) ? (ULONG)((wcslen(AppSessionStartDateTime) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[3], &UserIdType, sizeof(UserIdType));
		EventDataDescCreate(&EventData[4], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], (SubscriptionTierType != NULL) ? SubscriptionTierType : L"", (SubscriptionTierType != NULL) ? (ULONG)((wcslen(SubscriptionTierType) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[6], (SubscriptionTier != NULL) ? SubscriptionTier : L"", (SubscriptionTier != NULL) ? (ULONG)((wcslen(SubscriptionTier) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[7], (MediaType != NULL) ? MediaType : L"", (MediaType != NULL) ? (ULONG)((wcslen(MediaType) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[8], (ProviderId != NULL) ? ProviderId : L"", (ProviderId != NULL) ? (ULONG)((wcslen(ProviderId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[9], (ProviderMediaId != NULL) ? ProviderMediaId : L"", (ProviderMediaId != NULL) ? (ULONG)((wcslen(ProviderMediaId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[10], (ProviderMediaInstanceId != NULL) ? ProviderMediaInstanceId : L"", (ProviderMediaInstanceId != NULL) ? (ULONG)((wcslen(ProviderMediaInstanceId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[11], BingId, sizeof(GUID));
		EventDataDescCreate(&EventData[12], &MediaLengthMs, sizeof(MediaLengthMs));
		EventDataDescCreate(&EventData[13], &MediaControlAction, sizeof(MediaControlAction));
		EventDataDescCreate(&EventData[14], &PlaybackSpeed, sizeof(PlaybackSpeed));
		EventDataDescCreate(&EventData[15], &MediaPositionMs, sizeof(MediaPositionMs));
		EventDataDescCreate(&EventData[16], &PlaybackDurationMs, sizeof(PlaybackDurationMs));
		EventDataDescCreate(&EventData[17], (AcquisitionType != NULL) ? AcquisitionType : L"", (AcquisitionType != NULL) ? (ULONG)((wcslen(AcquisitionType) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[18], (AcquisitionContext != NULL) ? AcquisitionContext : L"", (AcquisitionContext != NULL) ? (ULONG)((wcslen(AcquisitionContext) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[19], (AcquisitionContextType != NULL) ? AcquisitionContextType : L"", (AcquisitionContextType != NULL) ? (ULONG)((wcslen(AcquisitionContextType) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[20], (AcquisitionContextId != NULL) ? AcquisitionContextId : L"", (AcquisitionContextId != NULL) ? (ULONG)((wcslen(AcquisitionContextId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[21], &PlaybackIsStream, sizeof(PlaybackIsStream));
		EventDataDescCreate(&EventData[22], &PlaybackIsTethered, sizeof(PlaybackIsTethered));
		EventDataDescCreate(&EventData[23], (MarketplaceLocation != NULL) ? MarketplaceLocation : L"", (MarketplaceLocation != NULL) ? (ULONG)((wcslen(MarketplaceLocation) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[24], (ContentLocale != NULL) ? ContentLocale : L"", (ContentLocale != NULL) ? (ULONG)((wcslen(ContentLocale) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[25], &TimeZoneOffset, sizeof(TimeZoneOffset));
		EventDataDescCreate(&EventData[26], &ScreenState, sizeof(ScreenState));

		return EtxEventWrite(&XDKS_0280C350Events[5], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_MediaUsage, EventData);
	}
#define EventEnabledMultiplayerRoundEnd() (TRUE)

	// Entry point to log the event MultiplayerRoundEnd
	//
	__inline
		ULONG
		EventWriteMultiplayerRoundEnd(__in_opt PCWSTR UserId, __in LPCGUID RoundId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int MatchTypeId, __in const signed int DifficultyLevelId, __in const float TimeInSeconds, __in const signed int ExitStatusId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_MultiplayerRoundEnd 11

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_MultiplayerRoundEnd];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], RoundId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[4], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[5], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[6], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[7], &MatchTypeId, sizeof(MatchTypeId));
		EventDataDescCreate(&EventData[8], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[9], &TimeInSeconds, sizeof(TimeInSeconds));
		EventDataDescCreate(&EventData[10], &ExitStatusId, sizeof(ExitStatusId));

		return EtxEventWrite(&XDKS_0280C350Events[6], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_MultiplayerRoundEnd, EventData);
	}
#define EventEnabledMultiplayerRoundStart() (TRUE)

	// Entry point to log the event MultiplayerRoundStart
	//
	__inline
		ULONG
		EventWriteMultiplayerRoundStart(__in_opt PCWSTR UserId, __in LPCGUID RoundId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int MatchTypeId, __in const signed int DifficultyLevelId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_MultiplayerRoundStart 9

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_MultiplayerRoundStart];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], RoundId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[4], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[5], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[6], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[7], &MatchTypeId, sizeof(MatchTypeId));
		EventDataDescCreate(&EventData[8], &DifficultyLevelId, sizeof(DifficultyLevelId));

		return EtxEventWrite(&XDKS_0280C350Events[7], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_MultiplayerRoundStart, EventData);
	}
#define EventEnabledObjectiveEnd() (TRUE)

	// Entry point to log the event ObjectiveEnd
	//
	__inline
		ULONG
		EventWriteObjectiveEnd(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in const signed int ObjectiveId, __in const signed int ExitStatusId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_ObjectiveEnd 9

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_ObjectiveEnd];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], &ObjectiveId, sizeof(ObjectiveId));
		EventDataDescCreate(&EventData[8], &ExitStatusId, sizeof(ExitStatusId));

		return EtxEventWrite(&XDKS_0280C350Events[8], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_ObjectiveEnd, EventData);
	}
#define EventEnabledObjectiveStart() (TRUE)

	// Entry point to log the event ObjectiveStart
	//
	__inline
		ULONG
		EventWriteObjectiveStart(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in const signed int ObjectiveId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_ObjectiveStart 8

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_ObjectiveStart];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], &ObjectiveId, sizeof(ObjectiveId));

		return EtxEventWrite(&XDKS_0280C350Events[9], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_ObjectiveStart, EventData);
	}
#define EventEnabledPageAction() (TRUE)

	// Entry point to log the event PageAction
	//
	__inline
		ULONG
		EventWritePageAction(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in const signed int ActionTypeId, __in const signed int ActionInputMethodId, __in_opt PCWSTR Page, __in_opt PCWSTR TemplateId, __in_opt PCWSTR DestinationPage, __in_opt PCWSTR Content)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PageAction 9

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PageAction];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], &ActionTypeId, sizeof(ActionTypeId));
		EventDataDescCreate(&EventData[4], &ActionInputMethodId, sizeof(ActionInputMethodId));
		EventDataDescCreate(&EventData[5], (Page != NULL) ? Page : L"", (Page != NULL) ? (ULONG)((wcslen(Page) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[6], (TemplateId != NULL) ? TemplateId : L"", (TemplateId != NULL) ? (ULONG)((wcslen(TemplateId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[7], (DestinationPage != NULL) ? DestinationPage : L"", (DestinationPage != NULL) ? (ULONG)((wcslen(DestinationPage) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[8], (Content != NULL) ? Content : L"", (Content != NULL) ? (ULONG)((wcslen(Content) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));

		return EtxEventWrite(&XDKS_0280C350Events[10], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PageAction, EventData);
	}
#define EventEnabledPageView() (TRUE)

	// Entry point to log the event PageView
	//
	__inline
		ULONG
		EventWritePageView(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR Page, __in_opt PCWSTR RefererPage, __in const signed int PageTypeId, __in_opt PCWSTR PageTags, __in_opt PCWSTR TemplateId, __in_opt PCWSTR Content)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PageView 9

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PageView];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], (Page != NULL) ? Page : L"", (Page != NULL) ? (ULONG)((wcslen(Page) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[4], (RefererPage != NULL) ? RefererPage : L"", (RefererPage != NULL) ? (ULONG)((wcslen(RefererPage) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &PageTypeId, sizeof(PageTypeId));
		EventDataDescCreate(&EventData[6], (PageTags != NULL) ? PageTags : L"", (PageTags != NULL) ? (ULONG)((wcslen(PageTags) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[7], (TemplateId != NULL) ? TemplateId : L"", (TemplateId != NULL) ? (ULONG)((wcslen(TemplateId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[8], (Content != NULL) ? Content : L"", (Content != NULL) ? (ULONG)((wcslen(Content) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));

		return EtxEventWrite(&XDKS_0280C350Events[11], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PageView, EventData);
	}
#define EventEnabledPlayerDefeated() (TRUE)

	// Entry point to log the event PlayerDefeated
	//
	__inline
		ULONG
		EventWritePlayerDefeated(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in LPCGUID RoundId, __in const signed int PlayerRoleId, __in const signed int PlayerWeaponId, __in const signed int EnemyRoleId, __in const signed int EnemyWeaponId, __in const float LocationX, __in const float LocationY, __in const float LocationZ)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PlayerDefeated 15

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PlayerDefeated];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], RoundId, sizeof(GUID));
		EventDataDescCreate(&EventData[8], &PlayerRoleId, sizeof(PlayerRoleId));
		EventDataDescCreate(&EventData[9], &PlayerWeaponId, sizeof(PlayerWeaponId));
		EventDataDescCreate(&EventData[10], &EnemyRoleId, sizeof(EnemyRoleId));
		EventDataDescCreate(&EventData[11], &EnemyWeaponId, sizeof(EnemyWeaponId));
		EventDataDescCreate(&EventData[12], &LocationX, sizeof(LocationX));
		EventDataDescCreate(&EventData[13], &LocationY, sizeof(LocationY));
		EventDataDescCreate(&EventData[14], &LocationZ, sizeof(LocationZ));

		return EtxEventWrite(&XDKS_0280C350Events[12], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PlayerDefeated, EventData);
	}
#define EventEnabledPlayerSessionEnd() (TRUE)

	// Entry point to log the event PlayerSessionEnd
	//
	__inline
		ULONG
		EventWritePlayerSessionEnd(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in const signed int ExitStatusId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionEnd 7

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionEnd];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[4], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[5], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[6], &ExitStatusId, sizeof(ExitStatusId));

		return EtxEventWrite(&XDKS_0280C350Events[13], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionEnd, EventData);
	}
#define EventEnabledPlayerSessionPause() (TRUE)

	// Entry point to log the event PlayerSessionPause
	//
	__inline
		ULONG
		EventWritePlayerSessionPause(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionPause 4

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionPause];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));

		return EtxEventWrite(&XDKS_0280C350Events[14], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionPause, EventData);
	}
#define EventEnabledPlayerSessionResume() (TRUE)

	// Entry point to log the event PlayerSessionResume
	//
	__inline
		ULONG
		EventWritePlayerSessionResume(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionResume 6

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionResume];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[4], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[5], &DifficultyLevelId, sizeof(DifficultyLevelId));

		return EtxEventWrite(&XDKS_0280C350Events[15], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionResume, EventData);
	}
#define EventEnabledPlayerSessionStart() (TRUE)

	// Entry point to log the event PlayerSessionStart
	//
	__inline
		ULONG
		EventWritePlayerSessionStart(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionStart 6

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionStart];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[4], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[5], &DifficultyLevelId, sizeof(DifficultyLevelId));

		return EtxEventWrite(&XDKS_0280C350Events[16], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PlayerSessionStart, EventData);
	}
#define EventEnabledPlayerSpawned() (TRUE)

	// Entry point to log the event PlayerSpawned
	//
	__inline
		ULONG
		EventWritePlayerSpawned(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in LPCGUID RoundId, __in const signed int PlayerRoleId, __in const float LocationX, __in const float LocationY, __in const float LocationZ)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PlayerSpawned 12

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PlayerSpawned];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], RoundId, sizeof(GUID));
		EventDataDescCreate(&EventData[8], &PlayerRoleId, sizeof(PlayerRoleId));
		EventDataDescCreate(&EventData[9], &LocationX, sizeof(LocationX));
		EventDataDescCreate(&EventData[10], &LocationY, sizeof(LocationY));
		EventDataDescCreate(&EventData[11], &LocationZ, sizeof(LocationZ));

		return EtxEventWrite(&XDKS_0280C350Events[17], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PlayerSpawned, EventData);
	}
#define EventEnabledPuzzleSolved() (TRUE)

	// Entry point to log the event PuzzleSolved
	//
	__inline
		ULONG
		EventWritePuzzleSolved(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in const float TimeInSeconds)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_PuzzleSolved 8

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_PuzzleSolved];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], &TimeInSeconds, sizeof(TimeInSeconds));

		return EtxEventWrite(&XDKS_0280C350Events[18], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_PuzzleSolved, EventData);
	}
#define EventEnabledSectionEnd() (TRUE)

	// Entry point to log the event SectionEnd
	//
	__inline
		ULONG
		EventWriteSectionEnd(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId, __in const signed int ExitStatusId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_SectionEnd 8

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_SectionEnd];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));
		EventDataDescCreate(&EventData[7], &ExitStatusId, sizeof(ExitStatusId));

		return EtxEventWrite(&XDKS_0280C350Events[19], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_SectionEnd, EventData);
	}
#define EventEnabledSectionStart() (TRUE)

	// Entry point to log the event SectionStart
	//
	__inline
		ULONG
		EventWriteSectionStart(__in_opt PCWSTR UserId, __in const signed int SectionId, __in LPCGUID PlayerSessionId, __in_opt PCWSTR MultiplayerCorrelationId, __in const signed int GameplayModeId, __in const signed int DifficultyLevelId)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_SectionStart 7

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_SectionStart];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], &SectionId, sizeof(SectionId));
		EventDataDescCreate(&EventData[3], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[4], (MultiplayerCorrelationId != NULL) ? MultiplayerCorrelationId : L"", (MultiplayerCorrelationId != NULL) ? (ULONG)((wcslen(MultiplayerCorrelationId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[5], &GameplayModeId, sizeof(GameplayModeId));
		EventDataDescCreate(&EventData[6], &DifficultyLevelId, sizeof(DifficultyLevelId));

		return EtxEventWrite(&XDKS_0280C350Events[20], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_SectionStart, EventData);
	}
#define EventEnabledViewOffer() (TRUE)

	// Entry point to log the event ViewOffer
	//
	__inline
		ULONG
		EventWriteViewOffer(__in_opt PCWSTR UserId, __in LPCGUID PlayerSessionId, __in LPCGUID OfferGuid, __in LPCGUID ProductGuid)
	{
#define ARGUMENT_COUNT_XDKS_0280C350_ViewOffer 5

		EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_XDKS_0280C350_ViewOffer];
		UINT8 scratch[64];

		EtxFillCommonFields_v7(&EventData[0], scratch, 64);

		EventDataDescCreate(&EventData[1], (UserId != NULL) ? UserId : L"", (UserId != NULL) ? (ULONG)((wcslen(UserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
		EventDataDescCreate(&EventData[2], PlayerSessionId, sizeof(GUID));
		EventDataDescCreate(&EventData[3], OfferGuid, sizeof(GUID));
		EventDataDescCreate(&EventData[4], ProductGuid, sizeof(GUID));

		return EtxEventWrite(&XDKS_0280C350Events[21], &XDKS_0280C350Provider, XDKS_0280C350Handle, ARGUMENT_COUNT_XDKS_0280C350_ViewOffer, EventData);
	}
#if defined(__cplusplus)
};
#endif

#pragma pack(pop)
